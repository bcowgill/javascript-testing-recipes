Things to try:
finish reading the jstest library code
use the async curry method in a mocha test to simplify async testing
jstest skip support?
vendor/util and vendor/html_fixture useful modules for testing
node/event_listeners/listenable.js useful way to add events to an object without using generic strings
write unit tests for the listenable object
write a node stream command template like my perl one for editing files in place
node/stream/source.js a useful stream source we can prime with data for testing stream code
node/stream/transformer.js a factory for creating stream transformers from a string -> string function

// Node assertion function                  Jasmine matcher

assert.strictEqual(actual, expected)        expect(actual).toBe(expected)
assert.notStrictEqual(actual, expected)     expect(actual).not.toBe(expected)

assert.deepEqual(actual, expected)          expect(actual).toEqual(expected)
assert.notDeepEqual(actual, expected)       expect(actual).not.toEqual(expected)

assert.equal(actual, expected)              // no analog : actual == expected
assert.notEqual(actual, expected)           // no analog : actual != expected

// Node assertion function                  Chai chain

assert.strictEqual(actual, expected)        chai.expect(actual).to.equal(expected)
assert.notStrictEqual(actual, expected)     chai.expect(actual).to.not.equal(expected)

assert.deepEqual(actual, expected)          chai.expect(actual).to.deep.equal(expected)
assert.notDeepEqual(actual, expected)       chai.expect(actual).to.not.deep.equal(expected)

assert.equal(actual, expected)              // no analog
assert.notEqual(actual, expected)           // no analog

// Node assertion function                  QUnit test function

assert.strictEqual(actual, expected)        strictEqual(actual, expected)
assert.notStrictEqual(actual, expected)     notStrictEqual(actual, expected)

assert.deepEqual(actual, expected)          deepEqual(actual, expected)
assert.notDeepEqual(actual, expected)       notDeepEqual(actual, expected)

assert.equal(actual, expected)              equal(actual, expected)
assert.notEqual(actual, expected)           notEqual(actual, expected)

// Node assertion function                  jstest assertion function

assert.strictEqual(actual, expected)        assertSame(actual, expected)
assert.notStrictEqual(actual, expected)     assertNotSame(actual, expected)

assert.deepEqual(actual, expected)          assertEqual(matcher, actual)
assert.notDeepEqual(actual, expected)       assertNotEqual(matcher, actual)

assert.equal(actual, expected)              // no analog
assert.notEqual(actual, expected)           // no analog

                                            assert, assertNot assertBlock,
                                            assertInDelta,
                                            assertKindOf, assertRespondTo,
                                            assertMatch, assertNoMatch,
                                            assertNull, assertNotNull,
                                            assertThrows, assertNothingThrown

// jstest matchers
arrayIncluding(item, item, ...) // matches a array which includes all of the matcher items provided
anything() // matches any value
instanceOf(type) // matches any value for which typeof value === type, or value instanceof type is true, for example instanceOf(Array) would match [], and instanceOf("string") would match "hello"
objectIncluding(properties) // matches any object containing all the given properties
match(pattern) // matches any string matching the regex pattern, or, if pattern has a match() method, any value for which that method returns true
anyArgs()  // matches any more arguments to a stub function .given() clause

These matchers can be composed, for example

arrayIncluding(objectIncluding({name: match(/cog/)}))

// jstest stubs

stub("add").given(2, 2).returns(4)  // given filters on the parameters passed to the stub i.e. add(2,2) => returns 4 in this case
var xhr = new $.Deferred()
xhr.resolve("Hello from the server")
stub($, "get").returns(xhr.promise())  // returns for functions which return a value directly. i.e. a promise in this case
stub("valid").given(arrayIncluding("hello", "world")).returns(true)  // can use matchers in the given() filter
stub("add").given(1, 2, anyArgs()).returns(3)

stub($, "get").yields(["Hello from the server"])  // yields works with functions that have a callback as last parameter i.e. $.get(..., function () {})
stub($, "get").given("/").yields(["Homepage HTML"])
stub($, "get").given("/users/18787.json").yields(['{"username":"jcoglan"}'])

// jstest mocks
// identical to stub api just change stub() to expect() before you call your test function
expect(console, "info").given(match(/^[0-9]{13} hello$/))  // expects that console.info will be called with a timestamp at start of message.

// sinon spies (jstest has no spies)
// tracks calls to other functions/objects but lets them go through, unlike a stub or mock
before: sinon.spy(console, "info")
test:   sinon.assert.calledWithMatch(console.info, /^[0-9]{13} hello$/)
after:  console.info.restore()

// async testing
node/async_steps/async_continuables_spec.js shows a nice way to clean up async tests for test frameworks which don't have built in async support using currying
node/asunc_steps/async_steps_spec.js shows the jstest way to make it even more like sync code
